#!/usr/bin/env python3
import os
import subprocess
from datetime import datetime
from pathlib import Path
from time import sleep


def build_docs():
    subprocess.check_call("bin/build_docs")


def refresh_assets():
    subprocess.check_call(
        ["rsync", "-avr", "docs/_static/", "docs/_build/html/_static/"]
    )


def watch_for_changes():
    """Watch for changes using watchdog."""
    from watchdog.events import FileSystemEvent, FileSystemEventHandler
    from watchdog.observers import Observer

    class MyHandler(FileSystemEventHandler):
        def __init__(self):
            super().__init__()
            self.last_build = datetime.now()

        def on_modified(self, event: FileSystemEvent):
            cwd = os.getcwd()
            file_path = Path(event.src_path)

            IGNORED_PATHS = ["docs/_build"]

            if event.is_directory:
                return

            if file_path.name.isdigit():
                return

            if (
                file_path.name.endswith(".swx")
                or file_path.name.endswith(".swp")
                or file_path.name.endswith("~")
            ):
                return

            for ignored_path in IGNORED_PATHS:
                ignored_path = os.path.join(cwd, ignored_path)
                if str(file_path).startswith(ignored_path):
                    return

            build_docs()
            refresh_assets()

    event_handler = MyHandler()
    observer = Observer()
    observer.schedule(event_handler, path="docs", recursive=True)
    observer.start()

    try:
        while True:
            sleep(1)
    except KeyboardInterrupt:
        observer.stop()


if __name__ == "__main__":
    build_docs()
    refresh_assets()
    watch_for_changes()
